Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences.  If multiple answers exist, you may return any of them.

(A string S is a subsequence of string T if deleting some number of characters from T (possibly 0, and the characters are chosen anywhere from T) results in the string S.)

 

Example 1:

Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.
-----------------------------------------------------------------------------------------------------------------------------

class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        
        return shortestSubString(str1,str2,str1.length(),str2.length());
        
    }
    
   
    
    
    public static String shortestSubString(String s1,String s2,int m,int n){
        
        // dp matrix
        int dp[][]=new int[m+1][n+1];
        
        for(int i=0;i<m+1;i++)
            for(int j=0;j<n+1;j++){
                // when any of the string is empty the corresponding cell is 0 since there is no match
                if(i==0 || j==0)
                    dp[i][j]=0;
                else if(i>0 && j>0){
                    // if the character matches just increment the current count by 1( take the count from diagonal)
                    if(s1.charAt(i-1)==s2.charAt(j-1)){
                        dp[i][j]=1+dp[i-1][j-1];
                    }
                    else{
                        // if not matches take max from adjacent cells i.e from left cell or top cell
                        dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                    }
                }
            }
        
        // traverse back to generate shortest common supersequence
        int i=m;
        int j=n;
        StringBuilder sb=new StringBuilder();
        
        while(i>0 && j>0){
            // this will give Longest Common Subsequence string
            // i.e travelling diagonally backwards in the matrix
            if(s1.charAt(i-1)==s2.charAt(j-1)){
                sb.append(s1.charAt(i-1));
                i--;
                j--;
            }
            else{
                // this will add to the supersequence i.e the characters other than common
                if(dp[i][j-1]>dp[i-1][j]){
                    sb.append(s2.charAt(j-1));
                        j--;
                }
                else{
                    sb.append(s1.charAt(i-1));
                        i--;   
                }
            }
        }
        
        // if any of the string reaches 0, it is still possible that another string may have left over uncommon characters
        // so traverse them and add it to the final answer
        while(i>0){
            sb.append(s1.charAt(i-1));
                        i--;   
        }
        while(j>0){
            sb.append(s2.charAt(j-1));
                        j--;
        }
               
        return sb.reverse().toString();
        
       
            }
        }
        
    